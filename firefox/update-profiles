#!/usr/bin/env python2.7

"""
This script updates all firefox profiles (all mentioned files will be replaced!):

Install symlinks to files: 

* userChrome.css
* userContent.css

Supported operating systems: Macos, Linux
"""

from __future__ import print_function, with_statement

import platform
import os.path
import ConfigParser
from sys import exit

# detect OS

system = platform.system()

if system == 'Darwin':
    FF_ROOT = os.path.expanduser('~/Library/Application Support/Firefox')
    PROFILES_CONFIG = os.path.join(FF_ROOT, 'profiles.ini')
    PROFILES_PATH = FF_ROOT
elif system == 'Linux':
    FF_ROOT = os.path.expanduser('~/.mozilla/firefox')
    PROFILES_CONFIG = os.path.join(FF_ROOT, 'profiles.ini')
    PROFILES_PATH = FF_ROOT
else:
    print('OS not supported')
    exit(1)

# prepare chrome files

# read profiles config and fetch all profile
config = ConfigParser.ConfigParser()
config.read(PROFILES_CONFIG)

profiles = []

usercontent_css_path = os.path.abspath('userContent.css')
userchrome_css_path = os.path.abspath('userChrome.css')
if system == 'Darwin':
    userchrome_os_css_path = os.path.abspath('userChrome.macos.css')
elif system == 'Linux':
    userchrome_os_css_path = os.path.abspath('userChrome.linux.css')

for s in config.sections():
    if s.startswith('Profile'):
        profile_path = os.path.join(FF_ROOT, config.get(s, 'Path'))

        # install chrome files
        chrome_path = os.path.join(profile_path, 'chrome')

        if not os.path.exists(chrome_path):
            os.mkdir(chrome_path)

        if not os.path.isdir(chrome_path):
            print('Target directory `{0}` is not a directory!'.format(chrome_path))
            continue

        # userChrome.css

        dst = os.path.join(chrome_path, 'userChrome.css')
        try:
            os.unlink(dst)
        except:
            pass
        with open(dst, 'w') as fp:
            fp.write('@include url("file://{0}");\n'.format(userchrome_css_path))
            fp.write('@include url("file://{0}");\n'.format(userchrome_os_css_path))


        # userContent.css
        dst = os.path.join(chrome_path, 'userContent.css')
        try:
            os.unlink(dst)
        except:
            pass
        os.symlink(usercontent_css_path, dst)


        profiles.append(profile_path)

# print(profiles)
